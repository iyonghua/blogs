{"meta":{"title":"weiyonghua's blogs","subtitle":"","description":"","author":"weiyonghua","url":"http://yoursite.com","root":"/blogs/"},"pages":[{"title":"404","date":"2017-03-09T09:36:36.000Z","updated":"2017-03-20T03:33:56.242Z","comments":true,"path":"404/index.html","permalink":"http://yoursite.com/404/index.html","excerpt":"","text":"themes/indigo/source/img"},{"title":"","date":"2019-12-24T09:39:26.079Z","updated":"2017-03-10T00:49:23.989Z","comments":true,"path":"jvm系列-八-jvm知识点总览-高级Java工程师面试必备/index.html","permalink":"http://yoursite.com/jvm%E7%B3%BB%E5%88%97-%E5%85%AB-jvm%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E8%A7%88-%E9%AB%98%E7%BA%A7Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E5%BF%85%E5%A4%87/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-03-09T09:20:26.000Z","updated":"2017-03-09T09:21:42.666Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2017-03-09T09:22:17.000Z","updated":"2017-03-09T09:22:36.441Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"使用 Travis CI 部署你的 Hexo 博客","slug":"使用-Travis-CI-部署你的-Hexo-博客","date":"2019-12-30T10:17:00.000Z","updated":"2019-12-30T10:18:18.129Z","comments":true,"path":"2019/12/30/使用-Travis-CI-部署你的-Hexo-博客/","link":"","permalink":"http://yoursite.com/2019/12/30/%E4%BD%BF%E7%94%A8-Travis-CI-%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84-Hexo-%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"之前使用Hexo的时候，都是在本地进行编译和部署的，平时使用的时候觉得没什么，只需要 hexo g hexo d两步就可以把博客更新的内容推到GitHub Pages上。但是某些时候可能会遇到你的文件夹中存在一些其他编辑到一半的文章——这时候想要更新博客中的某些内容但同时不想把没写完文章发布出去的话，就必须要先把那几篇文章移到其他地方，更新完复制回去。 这种蠢办法虽然有效但是十分麻烦——所以这次我们要上一些更牛逼的工具，例如——Travis CI。 思路做这件事的大体思路就是——以 remote 端的仓库为标准，来生成我们我们的博客。我们只需要把需要发布或者更新的内容push到远程仓库，持续集成工具就会帮我们把仓库中的内容clone下来，然后再在它的容器里进行编译、部署的流程。 开始之前首先要说的是，我的博客使用GitHub Pages来托管。源文件存放在 master 分支里，页面文件存放在 gh-pages 分支里。 启用 Travis CI首先用你的GitHub账户登录Travis CI 登录之后，在你的个人信息页面可以看到你GitHub中的所有仓库（如果没有的话授权一下就有了），找到你的博客所在的仓库，把右边的开关键拨到打开的状态。)点击右边的按钮进入设置页面，在设置页面中我们可以设置什么时候需要CI工具执行Build、配置环境变量、配置定时任务等。 这里推荐把 Build only if .travis.yml is present 这一项打开。 为 Travis CI 配置登录权限动动脑想一想就能知道——如果我们在一个陌生的容器中执行了编译操作然后想要推送到自己的GitHub仓库中时，是没有权限的——我们既没有配置SSH Key也没有在任何位置输入过密码。这里我们要用一个安全、稳定、便捷的手段来解决权限这个问题。 Access Token是一个好的解决方案。你可以理解成我们为给这个应用程序单独生成了一个口令，这个口令里包含了我们的账户和密码，我们在将要把代码推送到Github仓库的时候，告诉他这个口令，他就会把放行我们的推送请求了。 首先去GitHub给账户添加一个Personal Access Token。打开GitHub，在 Settings 页面中找到 Developer settings ，打开 Personal access tokens 标签页，点击新建一个token。 为这个Token取个名字，然后勾选 repo 这一栏，点击保存。![](data:image/svg+xml;utf8,) 如果不出意外，保存后屏幕上会显示一行乱码——这就是服务器为你生成的口令。 你需要先把他复制下来，因为在此之后你是看不到这个口令的。你也不必把它记在小本本上，如果有需要再生成一个 我们在Travis CI中把口令设置为一个环境变量。打开刚才Travis CI中blog仓库的设置页面，在环境变量一栏把 access_token 作为一个value填写进去，然后给它取个好听的名字，点击添加。 推荐不要勾选 Display value in build log 不然别人可以在日志里看到你的口令。 ![](data:image/svg+xml;utf8,) 可以看到上面那一行是之前添加过的token。正常情况下别人是不会看到你的口令的 在Travis CI服务端需要设置的就是这些，接下来要在仓库中添加Travis CI的配置文件。 添加配置文件首先要看一下你hexo的配置文件 _config.yml 中部署那一块的配置，以我的为例—— # Deployment ## Docs: https://hexo.io/docs/deployment.html deploy: type: git repo: https://github.com/morenyang/blog.git branch: gh-pages这里的指定了博客的仓库链接和部署的分支。这里的仓库链接过一会是要被替换成token形式的链接。 在仓库的根目录下，新建一个 .travis.yml 文件，然后将以下内容写进去，并将该改的地方改一下： language: node_js node_js: --lts before_script: - git config user.name &quot;YOUR_NAME&quot; - git config user.email &quot;YOUR_EMAIL&quot; - sed -i&apos;&apos; &quot;s~https://github.com/&lt;yourname&gt;/&lt;reponame&gt;.git~https://${GITHUB_ACCESS_TOKEN}@github.com/&lt;yourname&gt;/&lt;reopname&gt;.git~&quot; _config.yml script: - hexo g - hexo d说明一下： language 一项指的是容器的运行环境 node_js 一项指的是运行环境中node的版本，可以参照 nvm 的版本写法 before_script 指的是在执行操作前要运行的命令。 这里我们指定了 git 的一些配置 然后使用sed命令将hexo的配置文件中的部署仓库的链接替换成了access_token形式，其中前面的那一串是你在_config.yml中的链接，后面的那一串是token形式的链接。 ${GITHUB_ACCESS_TOKEN} 就是我们刚才为access_token配置的环境变量中的变量名。 这里记得把yourname和reponame换成你的 script 指的就是build的时候需要执行的命令了，这里根据平时的习惯设置为 hexo g 和 hexo d 如果有其他需要，你还可以加入自己的配置，例如设置分支、设置其他环境变量，还有一些生命周期的hook之类的，具体可以去查一下 亲手试一把到这里我们就大功告成了，在把配置文件推送到远程仓库后，你只需要把你更新的内容推送上去，你就可以在Travis CI的网站中看到实时的编译和部署情况了。 参考 How to publish to Github Pages from Travis CI? Travis CI自动化部署Hexo","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}],"author":"weiyonghua"},{"title":"国内加速访问Github的办法，超级简单","slug":"国内加速访问Github的办法，超级简单","date":"2019-12-30T09:35:00.000Z","updated":"2019-12-30T09:37:51.211Z","comments":true,"path":"2019/12/30/国内加速访问Github的办法，超级简单/","link":"","permalink":"http://yoursite.com/2019/12/30/%E5%9B%BD%E5%86%85%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AEGithub%E7%9A%84%E5%8A%9E%E6%B3%95%EF%BC%8C%E8%B6%85%E7%BA%A7%E7%AE%80%E5%8D%95/","excerpt":"","text":"国内加速访问Github的办法，超级简单 扩展迷Extfans 发现有趣的网站，玩转Chrome扩展，尽在扩展迷Extfans 37 人赞同了该文章 自从GitHub私有库免费后，又涌入了一大批开发爱好者。 但国内访问GitHub的速度实在是慢得一匹，在clone仓库时甚至只有10k以下的速度，大大影响了程序员的交友效率。)GitHub在国内访问速度慢的问题原因有很多，但最直接和最主要的原因是GitHub的分发加速网络的域名遭到dns污染。 今天我们就介绍通过修改系统hosts文件的办法，绕过国内dns解析，直接访问GitHub的CDN节点，从而达到加速的目的。 不需要科（）学（）上网，也不需要开代理加速器。 一、打开http://IPAddress.com网站，查询下面3个网址对应的IP地址 http://github.com http://assets-cdn.github.com http://github.global.ssl.fastly.net)二、修改本地电脑系统hosts文件 路径 C:\\Windows\\System32\\drivers\\etc 直接在最后加入以下代码（此时可能需要管理员权限,可以将hosts复制到桌面，修改好了再复制回去覆盖原先的）： 192.30.253.112 http://github.com 151.101.184.133 http://assets-cdn.github.com 151.101.185.194 http://github.global.ssl.fastly.net三、刷新系统dns缓存 用WIN+R快捷键打开运行窗口，输入命令：cmd并回车进入命令行窗口。 接着输入命令：ipconfig /flushdns回车后执行刷新本地dns缓存数据即可。内网限速的情况下效果如图所示，根据网上的普遍反馈来看，达到10m/s不是问题。)","categories":[{"name":"github","slug":"github","permalink":"http://yoursite.com/categories/github/"}],"tags":[],"author":"weiyonghua"},{"title":"Hello World","slug":"hello-world","date":"2019-12-24T09:47:00.000Z","updated":"2019-12-30T09:40:51.163Z","comments":true,"path":"2019/12/24/hello-world/","link":"","permalink":"http://yoursite.com/2019/12/24/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"调整tomcat vm内存大小","slug":"ed/调整tomcat-vm内存大小-2","date":"2017-03-13T06:17:00.000Z","updated":"2019-12-30T09:41:26.177Z","comments":true,"path":"2017/03/13/ed/调整tomcat-vm内存大小-2/","link":"","permalink":"http://yoursite.com/2017/03/13/ed/%E8%B0%83%E6%95%B4tomcat-vm%E5%86%85%E5%AD%98%E5%A4%A7%E5%B0%8F-2/","excerpt":"","text":"在tomcat vm启动参数中调整虚拟机内存大小： -server -XX:PermSize=64M -XX:MaxPermSize=512m -Xms512m -Xmx1024m","categories":[],"tags":[],"author":"weiyonghua"},{"title":"jvm系列(八):jvm知识点总览-高级Java工程师面试必备","slug":"jvm系列-八-jvm知识点总览-高级Java工程师面试必备","date":"2017-03-10T00:26:00.000Z","updated":"2019-12-30T09:41:42.903Z","comments":true,"path":"2017/03/10/jvm系列-八-jvm知识点总览-高级Java工程师面试必备/","link":"","permalink":"http://yoursite.com/2017/03/10/jvm%E7%B3%BB%E5%88%97-%E5%85%AB-jvm%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E8%A7%88-%E9%AB%98%E7%BA%A7Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E5%BF%85%E5%A4%87/","excerpt":"","text":"jvm系列(八):jvm知识点总览-高级Java工程师面试必备在江湖中要练就绝世武功必须内外兼备，精妙的招式和深厚的内功，武功的基础是内功。对于武功低（就像江南七怪）的人，招式更重要，因为他们不能靠内功直接去伤人，只能靠招式，利刃上优势来取胜了，但是练到高手之后，内功就更主要了。一个内功低的人招式在奇妙也打不过一个内功高的人。比如，你剑法再厉害，一剑刺过来，别人一掌打断你的剑，你还怎么使剑法，你一掌打到一个武功高的人身上，那人没什么事，却把你震伤了，你还怎么打。同样两者也是相辅相成的，内功深厚之后，原来普通的一招一式威力也会倍增。 对于搞开发的我们其实也是一样，现在流行的框架越来越多，封装的也越来越完善，各种框架可以搞定一切，几乎不用关注底层的实现，初级程序员只要熟悉基本的使用方法，便可以快速的开发上线；但对于高级程序员来讲，内功的修炼却越发的重要，比如算法、设计模式、底层原理等，只有把这些基础熟练之后，才能在开发过程中知其然知其所以然，出现问题时能快速定位到问题的本质。 对于Java程序员来讲，spring全家桶几乎可以搞定一切，spring全家桶便是精妙的招式，jvm就是内功心法很重要的一块，线上出现性能问题，jvm调优更是不可回避的问题。因此JVM基础知识对于高级程序员的重要性不必言语，我司在面试高级开发的时候，jvm相关知识也必定是考核的标准之一。本篇文章会根据之前写的jvm系列文章梳理出jvm需要关注的所有考察点。 jvm 总体梳理jvm体系总体分四大块： 类的加载机制 jvm内存结构 GC算法 垃圾回收 GC分析 命令调优 当然这些知识点在之前的文章中都有详细的介绍，这里只做主干的梳理 这里画了一个思维导图，将所有的知识点进行了陈列，因为图比较大可以点击右键下载了放大查看。 类的加载机制主要关注点： 什么是类的加载 类的生命周期 类加载器 双亲委派模型 什么是类的加载 类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个java.lang.Class对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的Class对象，Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口。 类的生命周期 类的生命周期包括这几个部分，加载、连接、初始化、使用和卸载，其中前三部是类的加载的过程,如下图； 加载，查找并加载类的二进制数据，在Java堆中也创建一个java.lang.Class类的对象 连接，连接又包含三块内容：验证、准备、初始化。1）验证，文件格式、元数据、字节码、符号引用验证；2）准备，为类的静态变量分配内存，并将其初始化为默认值；3）解析，把类中的符号引用转换为直接引用 初始化，为类的静态变量赋予正确的初始值 使用，new出对象程序中使用 卸载，执行垃圾回收 几个小问题？1、JVM初始化步骤 ？ 2、类初始化时机 ？3、哪几种情况下，Java虚拟机将结束生命周期？答案参考这篇文章jvm系列(一):java类的加载机制 类加载器 启动类加载器：Bootstrap ClassLoader，负责加载存放在JDK\\jre\\lib(JDK代表JDK的安装目录，下同)下，或被-Xbootclasspath参数指定的路径中的，并且能被虚拟机识别的类库 扩展类加载器：Extension ClassLoader，该加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载DK\\jre\\lib\\ext目录中，或者由java.ext.dirs系统变量指定的路径中的所有类库（如javax.*开头的类），开发者可以直接使用扩展类加载器。 应用程序类加载器：Application ClassLoader，该类加载器由sun.misc.Launcher$AppClassLoader来实现，它负责加载用户类路径（ClassPath）所指定的类，开发者可以直接使用该类加载器 类加载机制 全盘负责，当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入 父类委托，先让父类加载器试图加载该类，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类 缓存机制，缓存机制将会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存区寻找该Class，只有缓存区不存在，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓存区。这就是为什么修改了Class后，必须重启JVM，程序的修改才会生效 jvm内存结构主要关注点： jvm内存结构都是什么 对象分配规则 jvm内存结构 方法区和对是所有线程共享的内存区域；而java栈、本地方法栈和程序员计数器是运行是线程私有的内存区域。* Java堆（Heap）,是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。 方法区（Method Area）,方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。 程序计数器（Program Counter Register）,程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。 JVM栈（JVM Stacks）,与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。 本地方法栈（Native Method Stacks）,本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。 对象分配规则 对象优先分配在Eden区，如果Eden区没有足够的空间时，虚拟机执行一次Minor GC。 大对象直接进入老年代（大对象是指需要大量连续内存空间的对象）。这样做的目的是避免在Eden区和两个Survivor区之间发生大量的内存拷贝（新生代采用复制算法收集内存）。 长期存活的对象进入老年代。虚拟机为每个对象定义了一个年龄计数器，如果对象经过了1次Minor GC那么对象会进入Survivor区，之后每经过一次Minor GC那么对象的年龄加1，知道达到阀值对象进入老年区。 动态判断对象的年龄。如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代。 空间分配担保。每次进行Minor GC时，JVM会计算Survivor区移至老年区的对象的平均大小，如果这个值大于老年区的剩余值大小则进行一次Full GC，如果小于检查HandlePromotionFailure设置，如果true则只进行Monitor GC,如果false则进行Full GC。 如何通过参数来控制个各个内存区域参考此文章：jvm系列(二):JVM内存结构 GC算法 垃圾回收主要关注点： 对象存活判断 GC算法 垃圾回收器 对象存活判断 判断对象是否存活一般有两种方式： 引用计数：每个对象有一个引用计数属性，新增一个引用时计数加1，引用释放时计数减1，计数为0时可以回收。此方法简单，无法解决对象相互循环引用的问题。 可达性分析（Reachability Analysis）：从GC Roots开始向下搜索，搜索所走过的路径称为引用链。当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的，不可达对象。 GC算法 GC最基础的算法有三种：标记 -清除算法、复制算法、标记-压缩算法，我们常用的垃圾回收器一般都采用分代收集算法。 标记 -清除算法，“标记-清除”（Mark-Sweep）算法，如它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象。 复制算法，“复制”（Copying）的收集算法，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。 标记-压缩算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存 分代收集算法，“分代收集”（Generational Collection）算法，把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。 垃圾回收器 Serial收集器，串行收集器是最古老，最稳定以及效率高的收集器，可能会产生较长的停顿，只使用一个线程去回收。 ParNew收集器，ParNew收集器其实就是Serial收集器的多线程版本。 Parallel收集器，Parallel Scavenge收集器类似ParNew收集器，Parallel收集器更关注系统的吞吐量。 Parallel Old 收集器，Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记－整理”算法 CMS收集器，CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。 G1收集器，G1 (Garbage-First)是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足GC停顿时间要求的同时,还具备高吞吐量性能特征 GC算法和垃圾回收器算法图解以及更详细内容参考 jvm系列(三):GC算法 垃圾收集器 GC分析 命令调优主要关注点： GC日志分析 调优命令 调优工具 GC日志分析 摘录GC日志一部分（前部分为年轻代gc回收；后部分为full gc回收）： 通过上面日志分析得出，PSYoungGen、ParOldGen、PSPermGen属于Parallel收集器。其中PSYoungGen表示gc回收前后年轻代的内存变化；ParOldGen表示gc回收前后老年代的内存变化；PSPermGen表示gc回收前后永久区的内存变化。young gc 主要是针对年轻代进行内存回收比较频繁，耗时短；full gc 会对整个堆内存进行回城，耗时长，因此一般尽量减少full gc的次数 young gc 日志: Full GC日志: 调优命令 Sun JDK监控和故障处理命令有jps jstat jmap jhat jstack jinfo jps，JVM Process Status Tool,显示指定系统内所有的HotSpot虚拟机进程。 jstat，JVM statistics Monitoring是用于监视虚拟机运行时状态信息的命令，它可以显示出虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。 jmap，JVM Memory Map命令用于生成heap dump文件 jhat，JVM Heap Analysis Tool命令是与jmap搭配使用，用来分析jmap生成的dump，jhat内置了一个微型的HTTP/HTML服务器，生成dump的分析结果后，可以在浏览器中查看 jstack，用于生成java虚拟机当前时刻的线程快照。 jinfo，JVM Configuration info 这个命令作用是实时查看和调整虚拟机运行参数。 详细的命令使用参考这里jvm系列(四):jvm调优-命令篇 调优工具 常用调优工具分为两类,jdk自带监控工具：jconsole和jvisualvm，第三方有：MAT(Memory Analyzer Tool)、GChisto。 jconsole，Java Monitoring and Management Console是从java5开始，在JDK中自带的java监控和管理控制台，用于对JVM中内存，线程和类等的监控 jvisualvm，jdk自带全能工具，可以分析内存快照、线程快照；监控内存变化、GC变化等。 MAT，Memory Analyzer Tool，一个基于Eclipse的内存分析工具，是一个快速、功能丰富的Java heap分析工具，它可以帮助我们查找内存泄漏和减少内存消耗 GChisto，一款专业分析gc日志的工具 工具使用参考 jvm系列(七):jvm调优-工具篇","categories":[],"tags":[{"name":"面试","slug":"面试","permalink":"http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"hexo deploy发布失败解决办法","slug":"hexo-deploy发布失败解决办法","date":"2017-03-03T03:16:00.000Z","updated":"2019-12-30T09:42:03.951Z","comments":true,"path":"2017/03/03/hexo-deploy发布失败解决办法/","link":"","permalink":"http://yoursite.com/2017/03/03/hexo-deploy%E5%8F%91%E5%B8%83%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","excerpt":"","text":"问题描述：==ssh秘钥已添加，但没有权限提交== 1234567891011121314Error: Host key verification failed.fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists. at ChildProcess.&lt;anonymous&gt; (D:\\WORKSPACES\\itblog\\node_modules\\hexo-util\\lib\\spawn.js:37:17) at emitTwo (events.js:106:13) at ChildProcess.emit (events.js:191:7) at ChildProcess.cp.emit (D:\\WORKSPACES\\itblog\\node_modules\\cross-spawn\\lib\\enoent.js:40:29) at maybeClose (internal&#x2F;child_process.js:877:16) at Process.ChildProcess._handle.onexit (internal&#x2F;child_process.js:226:5)FATAL Host key verification failed.fatal: Could not read from remote repository. 解决办法：新增个人公钥（部署公钥） 1.如何生成ssh公钥你可以按如下命令来生成sshkey: 1234ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot; # Generating public&#x2F;private rsa key pair...# 三次回车即可生成 ssh key 查看你的public key，并把他添加到 Git @ OSC SSH key添加地址 12cat ~&#x2F;.ssh&#x2F;id_rsa.pub# ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc.... 添加后，在终端（Terminal）中输入 1ssh -T git@git.oschina.net 若返回 1Welcome to Git@OSC, yourname! 则证明添加成功。 2.怎么添加用户ssh key? 点击右上角的输入图片说明标志,进入个人中心,然后点击左侧的ssh公钥后在下图位置填写你的ssh公钥 点击确定,然后验证密码(即你的注册账号密码)就完成了ssh公钥添加 3.项目的ssh key和用户的ssh key两处地方有什么不同? 12项目的sshkey只针对项目,且我们仅对项目提供了部署公钥,即项目下的公钥仅能拉取项目,这通常用于生产服务器拉取仓库的代码。而用户的key则是针对用户的,用户添加了key就对用户名下的项目和用户参加了的项目具有权限,一般而言,用户的key具有推送和拉取的权限,而项目的key则只具有拉取权限","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}],"author":"weiyonghua"}]}